{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Developer docs","text":""},{"location":"#prerequisites","title":"\ud83d\udcdd Prerequisites","text":"<ul> <li>ffmpeg (minimum version 6.1, version 7 recommended), must be available in the path so install at OS level</li> <li>Python 3.12 is minimal required, 3.12 recommended (or check the pyproject for current required version)</li> <li>Python venv</li> </ul> <p>We recommend developing on a (recent) macOS or Linux machine. It is recommended to use Visual Studio Code as your IDE, since launch files to start Music Assistant are provided as part of the repository. Furthermore, the current code base is not verified to work on a native Windows machine. If you would like to develop on a Windows machine, install WSL2 to increase your swag-level \ud83e\udd18.</p>"},{"location":"#setting-up-your-development-environment","title":"\ud83d\ude80 Setting up your development environment","text":""},{"location":"#python-venv-recommended","title":"Python venv (recommended)","text":"<p>With this repository cloned locally, execute the following commands in a terminal from the root of your repository:</p> <ul> <li>Run our development setup script to setup the development environment:</li> <li><code>scripts/setup.sh</code> (creates a new separate virtual environment to nicely separate the project dependencies)</li> <li>The setup script will create a separate virtual environment (if needed), install all the project/test dependencies and configure pre-commit for linting and testing.</li> <li>Make sure, that the python interpreter in VS Code is set to the newly generated venv.</li> <li>Debug: Hit (Fn +) F5 to start Music Assistant locally</li> <li>The pre-compiled UI of Music Assistant will be available at <code>localhost:8095</code> \ud83c\udf89</li> </ul> <p>NOTE: Always re-run the setup script after you fetch the latest code because requirements could have changed.</p>"},{"location":"#using-devcontainercodespace","title":"Using Devcontainer/Codespace","text":"<p>We removed support for devcontainers because we do not have anyone willing to maintain it. It also is not very convenient due to all the port requirements, binaries etc. If somebody is willing to create and maintain a devcontainer with host networking and based on our base alpine image, we will add the support back. Until then: Develop with Python venv on a Linux or macOS machine (see above).</p>"},{"location":"#developing-on-the-music-assistant-server-models","title":"Developing on the Music Assistant Server Models","text":"<p>If you're working on core Music Assistant features, you may need to modify the shared data models. The Python models which are shared between client and server are located in the <code>music-assistant/models</code> repository, while the corresponding client-side TypeScript interfaces are in <code>interfaces.ts</code> in the Frontend repository.</p> <p>In most cases, you won't need to modify the models. However, if you do need to make changes, here's how to set up your development environment to use a local models repository instead of the one installed via pip:</p> <ul> <li> <p>First, clone the <code>models</code> repository to your local machine.</p> </li> <li> <p>Then, install your local <code>models</code> clone in \"editable\" mode. This allows your changes to be reflected immediately without a reinstall. Run the following command from the server repository's root:</p> <pre><code>uv pip install -e /path/to/your/cloned/models/repo --config-settings editable_mode=strict\n</code></pre> </li> </ul> <p>Note</p> <p>You must rerun this command whenever you add or remove files from the <code>models</code> repository to ensure the changes are picked up.</p>"},{"location":"#note-on-async-python","title":"Note on async Python","text":"<p>The Music Assistant server is fully built in Python. The Python language has no real supported for multi-threading. This is why Music Assistant heavily relies on asyncio to handle blocking IO. It is important to get a good understanding of asynchronous programming before building your first provider. This video is an excellent first step in the world of asyncio.</p>"},{"location":"#building-a-new-music-provider","title":"Building a new Music Provider","text":"<p>A Music Provider is the provider type that adds support for a 'source of music' to Music Assistant. Spotify and Youtube Music are examples of a Music Provider, but also Filesystem and SMB can be put in the Music Provider category. All Providers (of all types) can be found in the <code>music_assistant/providers</code> folder.</p> <p>TIP: We have created a template/stub provider in <code>music_assistant/providers/_template_music_provider</code> to get you started fast!</p> <p>Adding the necessary files for a new Music Provider</p> <p>Add a new folder to the <code>providers</code> folder with the name of provider. Add two files inside:</p> <ol> <li><code>__init__.py</code>. This file contains the Python code of your provider.</li> <li><code>manifest.json</code>. This file contains metadata and configuration for your provider.</li> </ol> <p>Configuring the manifest.json file</p> <p>The easiest way to get start is to copy the contents of the manifest of an existing Music Provider, e.g. Spotify or Youtube Music. See the manifest section for all available properties.</p> <p>Creating the provider</p> <p>Create a file called <code>__init__.py</code> inside the folder of your provider. This file will contain the logic for the provider. All Music Providers must inherit from the <code>MusicProvider</code> base class and override the necessary functions where applicable. A few things to note:</p> <ul> <li>The <code>setup()</code> function is called by Music Assistant upon initialization of the provider. It gives you the opportunity the prepare the provider for usage. For example, logging in a user or obtaining a token can be done in this function.</li> <li>A provider should let Music Assistant know which <code>ProviderFeature</code> it supports by implementing the property <code>supported_features</code>, which returns a list of <code>ProviderFeature</code>.</li> <li>The actual playback of audio in Music Assistant happens in two phases:<ol> <li><code>get_stream_details()</code> is called to obtain information about the audio, like the quality, format, # of channels etc.</li> <li><code>get_audio_stream()</code> is called to stream raw bytes of audio to the player. There are a few helpers to help you with this. Note that this function is not applicable to direct url streams.</li> </ol> </li> <li>Examples:<ol> <li>Streaming raw bytes using an external executable (librespot) to get audio, see the Spotify provider as an example</li> <li>Streaming a direct URL, see the Youtube Music provider as an example</li> <li>Streaming an https stream that uses an expiring URL, see the Qobuz provider as an example</li> </ol> </li> </ul>"},{"location":"#building-your-own-player-provider","title":"\u25b6\ufe0f Building your own Player Provider","text":"<p>A Player Provider is the provider type that adds support for a 'target of playback' to Music Assistant. Sonos, Chromecast and AirPlay are examples of a Player Provider. All Providers (of all types) can be found in the <code>music_assistant/providers</code> folder.</p> <p>TIP: We have created a template/stub provider in <code>music_assistant/providers/_template_player_provider</code> to get you started fast!</p>"},{"location":"#building-your-own-metadata-provider","title":"\ud83d\udcbd Building your own Metadata Provider","text":"<p>Will follow soon\u2122</p>"},{"location":"#building-your-own-plugin-provider","title":"\ud83d\udd0c Building your own Plugin Provider","text":"<p>Will follow soon\u2122</p>"},{"location":"#manifest-file","title":"\u2699\ufe0f Manifest file","text":"<p>The manifest file contains metadata and configuration about a provider. The supported properties are:</p> Name Description Type type <code>music</code>, <code>player</code>, <code>metadata</code> or <code>plugin</code> string domain The internal unique id of the provider, e.g. <code>spotify</code> or <code>ytmusic</code> string name The full name of the provider, e.g. <code>Spotify</code> or <code>Youtube Music</code> string description The full description of the provider string codeowners List of Github names of the codeowners of the provider array[string] config_entries List of configurable properties for the provider, e.g. <code>username</code> or <code>password</code>*. array[object] config_entries.key The unique key of the config entry, used to obtain the value in the provider code string config_entries.type The type of the config entry. Possible values: <code>string</code>, <code>secure_string</code> (for passwords), <code>boolean</code>, <code>float</code>, <code>integer</code>, <code>label</code> (for a single line of text in the settings page) string config_entries.label The label of the config entry. Used in the settings page string requirements List of requirements for the provider in pip string format. Supported values are <code>package==version</code> and <code>git+https://gitrepoforpackage</code> array[string] documentation URL to the Github discussion containing the documentation for the provider. string multi_instances Whether multiple instances of the configuration are supported, e.g. multiple user accounts for Spotify boolean <p>* These <code>config_entries</code> are used to automatically generate the settings page for the provider in the front-end. The values can be obtained via <code>self.config.get_value(key)</code>.</p>"}]}